# utils/tooltip_analyzer.py
import keyboard
import time
import threading
from pynput import mouse
from PIL import ImageGrab
import tkinter as tk
from database.db import connect_db
from utils.parser import parse_trade_data
from io import BytesIO
import os
from datetime import datetime
import pytesseract

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
AREA_SIZE = 500
OCR_TIMEOUT = 0.05
TOOLTIP_OFFSET_X = -225  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
TOOLTIP_OFFSET_Y = 40

# –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DEBUG_DIR = "debug_screenshots"
os.makedirs(DEBUG_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_alt_pressed = False
current_tooltip = None
last_item_id = None
item_cache = {}
last_cleanup = time.time()

# üîß –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–µ–±–∞–≥
DEBUG = True


def debug_log(message):
    if DEBUG:
        print(f"[Tooltip Analyzer] {message}")


def cleanup_cache():
    global item_cache, last_cleanup
    now = time.time()
    if now - last_cleanup > 60:
        item_cache = {k: v for k, v in item_cache.items() if (now - v['timestamp']) < 300}
        debug_log(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω: {len(item_cache)} –∑–∞–ø–∏—Å–µ–π")
        last_cleanup = now


def get_item_info(item_id):
    debug_log(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è item_id: {item_id}")
    cleanup_cache()

    if item_id in item_cache:
        debug_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {item_id}")
        return item_cache[item_id]['data']

    try:
        conn = connect_db()
        if not conn:
            debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return None

        cur = conn.cursor()
        cur.execute("""
            SELECT 
                item_name,
                best_buy_price,
                best_sell_price,
                median_buy_price,
                median_sell_price
            FROM vw_trade_deals 
            WHERE item_id = %s
        """, (item_id,))
        row = cur.fetchone()
        conn.close()

        if row:
            name, buy, sell, med_buy, med_sell = row
            info = {
                "item_id": item_id,
                "name": name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "best_buy": int(buy) if buy else "-",
                "best_sell": int(sell) if sell else "-",
                "med_buy": int(med_buy) if med_buy else "-",
                "med_sell": int(med_sell) if med_sell else "-"
            }
            debug_log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {info}")
        else:
            debug_log(f"üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è item_id {item_id}")
            info = {
                "item_id": item_id,
                "name": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "best_buy": "-", "best_sell": "-", "med_buy": "-", "med_sell": "-"
            }

        item_cache[item_id] = {"data": info, "timestamp": time.time()}
        return info

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
        return {
            "item_id": item_id,
            "name": "–û—à–∏–±–∫–∞",
            "best_buy": "?", "best_sell": "?", "med_buy": "?", "med_sell": "?"
        }


def get_tooltip_color(info):
    try:
        buy = info['best_buy']
        sell = info['best_sell']
        if isinstance(buy, int) and isinstance(sell, int) and sell > buy * 1.2:
            return "#006400"
        elif isinstance(sell, int) and isinstance(buy, int) and sell > buy:
            return "#228B22"
        else:
            return "#8B0000"
    except:
        return "#1e1e1e"


def show_tooltip(info, cursor_pos):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ä—è–¥–æ–º —Å –∫—É—Ä—Å–æ—Ä–æ–º ‚Äî –Ω–µ–≤–∏–¥–∏–º–æ–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ"""
    global current_tooltip

    if current_tooltip:
        hide_tooltip()

    try:
        # –°–æ–∑–¥–∞—ë–º Toplevel –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ root
        dialog = tk.Toplevel(tk._default_root)
        dialog.overrideredirect(True)  # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É
        dialog.attributes("-topmost", True)  # –ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö
        dialog.attributes("-alpha", 0.95)  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å

        # üî• –ö–õ–Æ–ß–ï–í–û–ï: –¥–µ–ª–∞–µ–º –æ–∫–Ω–æ "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º" –¥–ª—è –º—ã—à–∏
        dialog.wm_attributes("-transparentcolor", "#1e1e1e")  # –¶–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
        bg_color = "#1e1e1e"  # –≠—Ç–æ—Ç —Ü–≤–µ—Ç –∏—Å—á–µ–∑–Ω–µ—Ç
        dialog.configure(bg=bg_color)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        profit_line = ""
        if isinstance(info['best_buy'], int) and isinstance(info['best_sell'], int):
            profit = info['best_sell'] - info['best_buy']
            profit_line = f"\nüí∞ –ü—Ä–æ—Ñ–∏—Ç: {profit}"

        text = (
            f"ID: {info['item_id']}\n"
            f"{info['name']}\n\n"
            f"üü¢ –ü–æ–∫—É–ø–∫–∞: {info['best_buy']}\n"
            f"üî¥ –ü—Ä–æ–¥–∞–∂–∞: {info['best_sell']}{profit_line}\n"
            f"üìä –ú–µ–¥–∏–∞–Ω–∞: {info['med_buy']} / {info['med_sell']}"
        )

        label = tk.Label(
            dialog,
            text=text,
            justify="left",
            font=("Consolas", 9, "bold"),
            bg="#2a2a2a",  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ª–µ–π–±–ª–∞ (–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å transparentcolor!)
            fg="#e0e0e0",
            anchor="w",
            padx=12,
            pady=10
        )
        label.pack()

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
        x, y = cursor_pos
        dialog.update_idletasks()
        w, h = dialog.winfo_width(), dialog.winfo_height()

        # –†–∞–∑–º–µ—â–∞–µ–º –æ–∫–Ω–æ
        dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")

        # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        def follow_mouse():
            nonlocal dialog, label
            while dialog.winfo_exists() and current_tooltip == dialog:
                try:
                    x, y = mouse.Controller().position
                    dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")
                    time.sleep(0.05)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 20 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
                except tk.TclError:
                    break  # –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ

            debug_log("üî¥ –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º—ã—à—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        follow_thread = threading.Thread(target=follow_mouse, daemon=True)
        follow_thread.start()

        current_tooltip = dialog
        debug_log(f"üü¢ –ü–æ–∫–∞–∑–∞–Ω —Ç—É–ª—Ç–∏–ø –¥–ª—è item_id: {info['item_id']}")

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")


def hide_tooltip():
    """–°–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ"""
    global current_tooltip
    if current_tooltip:
        try:
            current_tooltip.destroy()
            debug_log("üî¥ –¢—É–ª—Ç–∏–ø —Å–∫—Ä—ã—Ç")
        except Exception as e:
            debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")
        current_tooltip = None


def get_cursor_area():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞"""
    try:
        x, y = mouse.Controller().position
        debug_log(f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: ({x}, {y})")

        left = x 
        top = y 
        right = left + AREA_SIZE
        bottom = top + AREA_SIZE

        img = ImageGrab.grab(bbox=(left, top, right, bottom))
        return img, (x, y)

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None, (0, 0)


def tooltip_worker(root):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç Alt + –º—ã—à—å"""
    global is_alt_pressed, last_item_id

    debug_log("üü¢ Tooltip Analyzer –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ Alt...")

    while True:
        try:
            alt_pressed = keyboard.is_pressed('alt')

            if alt_pressed:
                if not is_alt_pressed:
                    is_alt_pressed = True
                    debug_log("‚úÖ Alt –∑–∞–∂–∞—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑")

                img, pos = get_cursor_area()
                if img is None:
                    time.sleep(OCR_TIMEOUT)
                    continue

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è item_id
                data = parse_trade_data(pytesseract.image_to_string(img, lang='eng', config='--psm 6'))
                item_id = data["item_id"]

                debug_log(f"üîç OCR –Ω–∞—à—ë–ª item_id: {item_id}")

                if item_id and item_id != last_item_id:
                    info = get_item_info(item_id)
                    if info:
                        show_tooltip(info, pos)
                        last_item_id = item_id
                    else:
                        debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞")
                elif not item_id and current_tooltip:
                    hide_tooltip()
                    last_item_id = None

            else:
                if is_alt_pressed:
                    is_alt_pressed = False
                    debug_log("üî¥ Alt –æ—Ç–∂–∞—Ç ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                    hide_tooltip()
                    last_item_id = None

            time.sleep(OCR_TIMEOUT)

        except Exception as e:
            debug_log(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ tooltip_worker: {e}")
            time.sleep(1)


def start_tooltip_analyzer(root):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    thread = threading.Thread(target=tooltip_worker, args=(root,), daemon=True)
    thread.start()
    debug_log("üöÄ Tooltip Analyzer –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Left Alt + –Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç.")