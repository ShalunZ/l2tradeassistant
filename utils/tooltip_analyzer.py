# utils/tooltip_analyzer.py
import keyboard
import time
import threading
import os
import pytesseract
import win32gui
import win32process
import win32api
import win32con
import tkinter as tk

from pynput import mouse
from PIL import ImageGrab
from database.db import connect_db
from utils.parser import parse_trade_data
from io import BytesIO
from config import TESSERACT_PATH
from datetime import datetime
from utils.screenshot import *
from utils.logger import debug_log


pytesseract.pytesseract.tesseract_cmd = TESSERACT_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏

OCR_TIMEOUT = 0.1
TOOLTIP_OFFSET_X = -225  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
TOOLTIP_OFFSET_Y = 40

# –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DEBUG_DIR = "debug_screenshots"
os.makedirs(DEBUG_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞)
is_alt_pressed = False
current_tooltip = None
last_item_id = None
last_cursor_pos = (0, 0)        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
last_check_pos = (0, 0)         # –ü–æ–∑–∏—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∞–ª—Å—è —Ç–µ–∫—É—â–∏–π "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π" –∞–Ω–∞–ª–∏–∑
item_cache = {}
last_cleanup = time.time()
STABLE_RADIUS = 15               # –ü–∏–∫—Å–µ–ª–∏: –µ—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º OCR



def get_active_window_process_name():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ (–±–µ–∑ psutil)"""
    try:
        hwnd = win32gui.GetForegroundWindow()
        _, pid = win32process.GetWindowThreadProcessId(hwnd)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        handle = win32api.OpenProcess(win32con.PROCESS_QUERY_INFORMATION, False, pid)
        if not handle:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
            exe_name = win32process.GetModuleFileNameEx(handle, 0)
            return exe_name.lower().split('\\')[-1]
        except:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —á–µ—Ä–µ–∑ EnumProcesses (–µ—Å–ª–∏ –≤—ã—à–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ)
            return str(pid)  # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ ‚Äî —Ö–æ—Ç—è –±—ã PID
        finally:
            win32api.CloseHandle(handle)
    except Exception as e:
        return None

def cleanup_cache():
    global item_cache, last_cleanup
    now = time.time()
    if now - last_cleanup > 60:
        item_cache = {k: v for k, v in item_cache.items() if (now - v['timestamp']) < 300}
        debug_log(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω: {len(item_cache)} –∑–∞–ø–∏—Å–µ–π")
        last_cleanup = now


def get_item_info(item_id):
    debug_log(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è item_id: {item_id}")
    cleanup_cache()

    if item_id in item_cache:
        debug_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {item_id}")
        return item_cache[item_id]['data']

    try:
        conn = connect_db()
        if not conn:
            debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return None

        cur = conn.cursor()

        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
        cur.execute("""
            SELECT 
                item_name,
                best_buy_price,
                best_sell_price,
                median_buy_price,
                median_sell_price
            FROM vw_trade_deals 
            WHERE item_id = ?
        """, (item_id,))
        row = cur.fetchone()

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∞—Ñ—Ç–µ
        cur.execute("""
            SELECT 
                current_buy_price, 
                crafting_cost, 
                profit_from_craft, 
                profit_percent, 
                recommendation
            FROM vw_craft_profit 
            WHERE item_id = ?
        """, (item_id,))
        craft_row = cur.fetchone()

        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if row:
            name, buy, sell, med_buy, med_sell = row
            info = {
                "item_id": item_id,
                "name": name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "best_buy": int(buy) if buy else "-",
                "best_sell": int(sell) if sell else "-",
                "med_buy": int(med_buy) if med_buy else "-",
                "med_sell": int(med_sell) if med_sell else "-"
            }
            debug_log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {info}")
        else:
            debug_log(f"üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è item_id {item_id}")
            info = {
                "item_id": item_id,
                "name": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "best_buy": "-", "best_sell": "-", "med_buy": "-", "med_sell": "-"
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∞—Ñ—Ç–µ
        if craft_row:
            buy_price, cost, profit, percent, rec = craft_row
            info["craft_info"] = {
                "buy_price": int(buy_price) if buy_price else 0,
                "cost": int(cost) if cost else 0,
                "profit": int(profit) if profit else 0,
                "percent": float(percent) if percent else 0.0,
                "rec": rec or "‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }
            debug_log(f"üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∞—Ñ—Ç–µ: {info['craft_info']}")
        else:
            info["craft_info"] = {
                "buy_price": 0,
                "cost": 0,
                "profit": 0,
                "percent": 0.0,
                "rec": "‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        item_cache[item_id] = {"data": info, "timestamp": time.time()}

        return info

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
        return {
            "item_id": item_id,
            "name": "–û—à–∏–±–∫–∞",
            "best_buy": "?", "best_sell": "?", "med_buy": "?", "med_sell": "?",
            "craft_info": {
                "buy_price": 0, "cost": 0, "profit": 0, "percent": 0.0, "rec": "üî¥ –û—à–∏–±–∫–∞"
            }
        }


def get_tooltip_color(info):
    try:
        buy = info['best_buy']
        sell = info['best_sell']
        if isinstance(buy, int) and isinstance(sell, int) and sell > buy * 1.2:
            return "#006400"
        elif isinstance(sell, int) and isinstance(buy, int) and sell > buy:
            return "#228B22"
        else:
            return "#8B0000"
    except:
        return "#1e1e1e"

def show_tooltip(info, cursor_pos):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ä—è–¥–æ–º —Å –∫—É—Ä—Å–æ—Ä–æ–º ‚Äî –Ω–µ–≤–∏–¥–∏–º–æ–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ"""
    global current_tooltip

    try:
        # üåü 1. –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º Toplevel
        if current_tooltip is None:
            # –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ä–∞–∑
            dialog = tk.Toplevel(tk._default_root)
            dialog.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            dialog.overrideredirect(True)
            dialog.attributes("-topmost", True)
            dialog.attributes("-alpha", 0)  # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            dialog.wm_attributes("-transparentcolor", "#1e1e1e")  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ü–≤–µ—Ç
            dialog.configure(bg="#1e1e1e")

            # –°–æ–∑–¥–∞—ë–º Label –∏ –¥–µ—Ä–∂–∏–º —Å—Å—ã–ª–∫—É
            label = tk.Label(
                dialog,
                justify="left",
                font=("Consolas", 9, "bold"),
                fg="#e0e0e0",
                anchor="w",
                padx=12,
                pady=10
            )
            label.pack()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ current_tooltip
            current_tooltip = {
                "window": dialog,
                "label": label,
                "follow_thread": None,
                "is_visible": False
            }
        else:
            dialog = current_tooltip["window"]
            label = current_tooltip["label"]

        # üåü 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å
        craft_line = ""
        bg_label_color = "#2a2a2a"

        if info.get("craft_info"):
            craft = info["craft_info"]
            cost = int(craft["cost"])
            rec = craft["rec"]

            if rec == "üü¢ –ö—É–ø–∏ –≥–æ—Ç–æ–≤—ã–π":
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüîß {rec}"
                bg_label_color = "#3a3a2a"
            elif rec == "üü° –ö—Ä–∞—Ñ—Ç–∏ —Å–∞–º":
                profit_craft = int(craft["profit"])
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüí∞ –ü—Ä–æ—Ñ–∏—Ç: {profit_craft:,}\nüîß {rec}"
                bg_label_color = "#2a3a2a"
            elif rec == "üî¥ –ù–µ –≤—ã–≥–æ–¥–Ω–æ":
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüîß {rec}"
                bg_label_color = "#3a2a2a"

        text = (
            f"ID: {info['item_id']}\n"
            f"{info['name']}\n\n"
            f"üü¢ Buy: {info['best_buy']}\n"
            f"üî¥ Sell: {info['best_sell']}\n"
            f"üìä Median: {info['med_buy']} / {info['med_sell']}{craft_line}"
        )

        label.config(text=text, bg=bg_label_color)
        dialog.update_idletasks()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        # üåü 3. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
        w, h = dialog.winfo_width(), dialog.winfo_height()
        x, y = cursor_pos
        dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")

        # üåü 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º (–µ—Å–ª–∏ –±—ã–ª —Å–∫—Ä—ã—Ç)
        if not current_tooltip["is_visible"]:
            dialog.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
            dialog.attributes("-alpha", 0.95)  # –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º
            current_tooltip["is_visible"] = True

        # üåü 5. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if current_tooltip["follow_thread"] is None or not current_tooltip["follow_thread"].is_alive():
            def follow_mouse():
                while current_tooltip and current_tooltip["is_visible"]:
                    try:
                        x, y = mouse.Controller().position
                        dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")
                        time.sleep(0.05)
                    except (tk.TclError, AttributeError):
                        break
                debug_log("üî¥ –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º—ã—à—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            thread = threading.Thread(target=follow_mouse, daemon=True)
            current_tooltip["follow_thread"] = thread
            thread.start()

        debug_log(f"üü¢ –ü–æ–∫–∞–∑–∞–Ω —Ç—É–ª—Ç–∏–ø –¥–ª—è item_id: {info['item_id']}")

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")

def hide_tooltip():
    """–°–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±–µ–∑ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"""
    global current_tooltip
    if current_tooltip:
        try:
            # –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º
            current_tooltip["window"].withdraw()
            current_tooltip["window"].attributes("-alpha", 0)
            current_tooltip["is_visible"] = False
            debug_log("üî¥ –¢—É–ª—Ç–∏–ø —Å–∫—Ä—ã—Ç (–Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω)")
        except Exception as e:
            debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")
        current_tooltip["follow_thread"] = None


def get_cursor_area():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞"""
    try:
        x, y = mouse.Controller().position
        debug_log(f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: ({x}, {y})")


        img = take_screenshot()
        return img, (x, y)

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None, (0, 0)


def tooltip_worker(root):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç F + –º—ã—à—å"""
    global is_alt_pressed, last_item_id, last_cursor_pos, last_check_pos

    # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º—ã—à–∏
    prev_pos = (0, 0)
    stable_start_time = None
    STABLE_DURATION = 0.2
    MAX_MOVEMENT = 5
    STABLE_RADIUS = 15

    failed_attempts = 0
    MAX_FAILED_ATTEMPTS = 2
    waiting_for_movement = False  # üî• –ù–æ–≤—ã–π —Ñ–ª–∞–≥

    while True:
        try:
            active_process = get_active_window_process_name()
            in_game = active_process in ['lineageii.exe', 'l2.exe', 'lu4.bin']
            alt_pressed = keyboard.is_pressed('f')

            if alt_pressed and in_game:
                if not is_alt_pressed:
                    is_alt_pressed = True
                    debug_log("‚úÖ F –∑–∞–∂–∞—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ (–≤ –∏–≥—Ä–µ)")

                x, y = mouse.Controller().position
                current_pos = (x, y)
                last_cursor_pos = current_pos

                # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∑–æ–Ω—ã? ---
                if last_item_id is not None and last_check_pos != (0, 0):
                    dx = x - last_check_pos[0]
                    dy = y - last_check_pos[1]
                    distance = (dx**2 + dy**2) ** 0.5
                    if distance <= STABLE_RADIUS:
                        # –í –∑–æ–Ω–µ ‚Üí –Ω–µ –¥–µ–ª–∞–µ–º OCR
                        time.sleep(OCR_TIMEOUT)
                        continue

                # --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞: –∂–¥—ë–º –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á?
                if waiting_for_movement:
                    dx_move = x - prev_pos[0]
                    dy_move = y - prev_pos[1]
                    movement = (dx_move**2 + dy_move**2) ** 0.5
                    if movement > MAX_MOVEMENT:
                        debug_log("üü¢ –ú—ã—à—å —Å–¥–≤–∏–Ω—É–ª–∞—Å—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á")
                        failed_attempts = 0
                        waiting_for_movement = False
                        stable_start_time = None  # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    time.sleep(OCR_TIMEOUT)
                    continue

                # --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞: –º—ã—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å? ---
                dx_move = x - prev_pos[0]
                dy_move = y - prev_pos[1]
                movement = (dx_move**2 + dy_move**2) ** 0.5
                prev_pos = current_pos

                if movement <= MAX_MOVEMENT:
                    if stable_start_time is None:
                        stable_start_time = time.time()
                    elif time.time() - stable_start_time >= STABLE_DURATION:
                        pass  # –ú–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    else:
                        time.sleep(OCR_TIMEOUT)
                        continue
                else:
                    stable_start_time = None
                    time.sleep(OCR_TIMEOUT)
                    continue

                # --- –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ OCR ---
                img, pos = get_cursor_area()
                if img is None:
                    time.sleep(OCR_TIMEOUT)
                    continue

                data = parse_trade_data(pytesseract.image_to_string(img, lang='eng', config='--psm 6'))
                item_id = data["item_id"]
                debug_log(f"üîç OCR –Ω–∞—à—ë–ª item_id: {item_id}")

                if item_id:
                    failed_attempts = 0  # ‚úÖ –£—Å–ø–µ—Ö ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º

                    info = get_item_info(item_id)
                    if info and info["name"] == "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                        debug_log("üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤—Ç–æ—Ä OCR")
                        time.sleep(OCR_TIMEOUT)
                        continue

                    if info:
                        show_tooltip(info, pos)
                        last_item_id = item_id
                        last_check_pos = pos
                    else:
                        debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞")
                else:
                    failed_attempts += 1
                    debug_log(f"üü° –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ OCR #{failed_attempts} (–±–µ–∑ item_id)")

                    if failed_attempts >= MAX_FAILED_ATTEMPTS:
                        debug_log("üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ñ–¥—ë–º –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏...")
                        waiting_for_movement = True  # üî• –í–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                        failed_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
                        stable_start_time = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                        # ‚Üí —Å–ª–µ–¥—É—é—â–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
                    else:
                        time.sleep(OCR_TIMEOUT)
                        continue

            elif is_alt_pressed:
                is_alt_pressed = False
                debug_log("üî¥ F –æ—Ç–∂–∞—Ç ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                hide_tooltip()
                last_item_id = None
                last_check_pos = (0, 0)
                stable_start_time = None
                failed_attempts = 0
                waiting_for_movement = False

            time.sleep(OCR_TIMEOUT)

        except Exception as e:
            debug_log(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ tooltip_worker: {e}")
            time.sleep(1)

def start_tooltip_analyzer(root):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    thread = threading.Thread(target=tooltip_worker, args=(root,), daemon=True)
    thread.start()
    debug_log("üöÄ Tooltip Analyzer –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ F + –Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç.")