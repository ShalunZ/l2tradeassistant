# utils/tooltip_analyzer.py
import keyboard
import time
import threading
from pynput import mouse
from PIL import ImageGrab
import tkinter as tk
from database.db import connect_db
from utils.parser import parse_trade_data
from io import BytesIO
import os
from datetime import datetime
import pytesseract
from config import TESSERACT_PATH
pytesseract.pytesseract.tesseract_cmd = TESSERACT_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
AREA_SIZE = 500
OCR_TIMEOUT = 0.05
TOOLTIP_OFFSET_X = -225  # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
TOOLTIP_OFFSET_Y = 40

# –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DEBUG_DIR = "debug_screenshots"
os.makedirs(DEBUG_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
is_alt_pressed = False
current_tooltip = None
last_item_id = None
item_cache = {}
last_cleanup = time.time()

# üîß –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–µ–±–∞–≥
DEBUG = True


def debug_log(message):
    if DEBUG:
        print(f"[Tooltip Analyzer] {message}")


def cleanup_cache():
    global item_cache, last_cleanup
    now = time.time()
    if now - last_cleanup > 60:
        item_cache = {k: v for k, v in item_cache.items() if (now - v['timestamp']) < 300}
        debug_log(f"üßπ –ö—ç—à –æ—á–∏—â–µ–Ω: {len(item_cache)} –∑–∞–ø–∏—Å–µ–π")
        last_cleanup = now


def get_item_info(item_id):
    debug_log(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è item_id: {item_id}")
    cleanup_cache()

    if item_id in item_cache:
        debug_log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {item_id}")
        return item_cache[item_id]['data']

    try:
        conn = connect_db()
        if not conn:
            debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
            return None

        cur = conn.cursor()

        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
        cur.execute("""
            SELECT 
                item_name,
                best_buy_price,
                best_sell_price,
                median_buy_price,
                median_sell_price
            FROM vw_trade_deals 
            WHERE item_id = ?
        """, (item_id,))
        row = cur.fetchone()

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∞—Ñ—Ç–µ
        cur.execute("""
            SELECT 
                current_buy_price, 
                crafting_cost, 
                profit_from_craft, 
                profit_percent, 
                recommendation
            FROM vw_craft_profit 
            WHERE item_id = ?
        """, (item_id,))
        craft_row = cur.fetchone()

        conn.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if row:
            name, buy, sell, med_buy, med_sell = row
            info = {
                "item_id": item_id,
                "name": name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "best_buy": int(buy) if buy else "-",
                "best_sell": int(sell) if sell else "-",
                "med_buy": int(med_buy) if med_buy else "-",
                "med_sell": int(med_sell) if med_sell else "-"
            }
            debug_log(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î: {info}")
        else:
            debug_log(f"üü° –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –¥–ª—è item_id {item_id}")
            info = {
                "item_id": item_id,
                "name": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                "best_buy": "-", "best_sell": "-", "med_buy": "-", "med_sell": "-"
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∞—Ñ—Ç–µ
        if craft_row:
            buy_price, cost, profit, percent, rec = craft_row
            info["craft_info"] = {
                "buy_price": int(buy_price) if buy_price else 0,
                "cost": int(cost) if cost else 0,
                "profit": int(profit) if profit else 0,
                "percent": float(percent) if percent else 0.0,
                "rec": rec or "‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }
            debug_log(f"üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∞—Ñ—Ç–µ: {info['craft_info']}")
        else:
            info["craft_info"] = {
                "buy_price": 0,
                "cost": 0,
                "profit": 0,
                "percent": 0.0,
                "rec": "‚ö™ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        item_cache[item_id] = {"data": info, "timestamp": time.time()}

        return info

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ë–î: {e}")
        return {
            "item_id": item_id,
            "name": "–û—à–∏–±–∫–∞",
            "best_buy": "?", "best_sell": "?", "med_buy": "?", "med_sell": "?",
            "craft_info": {
                "buy_price": 0, "cost": 0, "profit": 0, "percent": 0.0, "rec": "üî¥ –û—à–∏–±–∫–∞"
            }
        }


def get_tooltip_color(info):
    try:
        buy = info['best_buy']
        sell = info['best_sell']
        if isinstance(buy, int) and isinstance(sell, int) and sell > buy * 1.2:
            return "#006400"
        elif isinstance(sell, int) and isinstance(buy, int) and sell > buy:
            return "#228B22"
        else:
            return "#8B0000"
    except:
        return "#1e1e1e"

def show_tooltip(info, cursor_pos):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Ä—è–¥–æ–º —Å –∫—É—Ä—Å–æ—Ä–æ–º ‚Äî –Ω–µ–≤–∏–¥–∏–º–æ–µ –∏ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ"""
    global current_tooltip

    try:
        # üåü 1. –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º Toplevel
        if current_tooltip is None:
            # –°–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω —Ä–∞–∑
            dialog = tk.Toplevel(tk._default_root)
            dialog.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            dialog.overrideredirect(True)
            dialog.attributes("-topmost", True)
            dialog.attributes("-alpha", 0)  # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            dialog.wm_attributes("-transparentcolor", "#1e1e1e")  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ü–≤–µ—Ç
            dialog.configure(bg="#1e1e1e")

            # –°–æ–∑–¥–∞—ë–º Label –∏ –¥–µ—Ä–∂–∏–º —Å—Å—ã–ª–∫—É
            label = tk.Label(
                dialog,
                justify="left",
                font=("Consolas", 9, "bold"),
                fg="#e0e0e0",
                anchor="w",
                padx=12,
                pady=10
            )
            label.pack()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ current_tooltip
            current_tooltip = {
                "window": dialog,
                "label": label,
                "follow_thread": None,
                "is_visible": False
            }
        else:
            dialog = current_tooltip["window"]
            label = current_tooltip["label"]

        # üåü 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å
        craft_line = ""
        bg_label_color = "#2a2a2a"

        if info.get("craft_info"):
            craft = info["craft_info"]
            cost = int(craft["cost"])
            rec = craft["rec"]

            if rec == "üü¢ –ö—É–ø–∏ –≥–æ—Ç–æ–≤—ã–π":
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüîß {rec}"
                bg_label_color = "#3a3a2a"
            elif rec == "üü° –ö—Ä–∞—Ñ—Ç–∏ —Å–∞–º":
                profit_craft = int(craft["profit"])
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüí∞ –ü—Ä–æ—Ñ–∏—Ç: {profit_craft:,}\nüîß {rec}"
                bg_label_color = "#2a3a2a"
            elif rec == "üî¥ –ù–µ –≤—ã–≥–æ–¥–Ω–æ":
                craft_line = f"\nüß± –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:,}\nüîß {rec}"
                bg_label_color = "#3a2a2a"

        text = (
            f"ID: {info['item_id']}\n"
            f"{info['name']}\n\n"
            f"üü¢ Buy: {info['best_buy']}\n"
            f"üî¥ Sell: {info['best_sell']}\n"
            f"üìä Median: {info['med_buy']} / {info['med_sell']}{craft_line}"
        )

        label.config(text=text, bg=bg_label_color)
        dialog.update_idletasks()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã

        # üåü 3. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
        w, h = dialog.winfo_width(), dialog.winfo_height()
        x, y = cursor_pos
        dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")

        # üåü 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º (–µ—Å–ª–∏ –±—ã–ª —Å–∫—Ä—ã—Ç)
        if not current_tooltip["is_visible"]:
            dialog.deiconify()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
            dialog.attributes("-alpha", 0.95)  # –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º
            current_tooltip["is_visible"] = True

        # üåü 5. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if current_tooltip["follow_thread"] is None or not current_tooltip["follow_thread"].is_alive():
            def follow_mouse():
                while current_tooltip and current_tooltip["is_visible"]:
                    try:
                        x, y = mouse.Controller().position
                        dialog.geometry(f"{w}x{h}+{x + TOOLTIP_OFFSET_X}+{y - TOOLTIP_OFFSET_Y}")
                        time.sleep(0.05)
                    except (tk.TclError, AttributeError):
                        break
                debug_log("üî¥ –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ –º—ã—à—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            thread = threading.Thread(target=follow_mouse, daemon=True)
            current_tooltip["follow_thread"] = thread
            thread.start()

        debug_log(f"üü¢ –ü–æ–∫–∞–∑–∞–Ω —Ç—É–ª—Ç–∏–ø –¥–ª—è item_id: {info['item_id']}")

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")

def hide_tooltip():
    """–°–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±–µ–∑ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è"""
    global current_tooltip
    if current_tooltip:
        try:
            # –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º
            current_tooltip["window"].withdraw()
            current_tooltip["window"].attributes("-alpha", 0)
            current_tooltip["is_visible"] = False
            debug_log("üî¥ –¢—É–ª—Ç–∏–ø —Å–∫—Ä—ã—Ç (–Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω)")
        except Exception as e:
            debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ —Ç—É–ª—Ç–∏–ø–∞: {e}")
        current_tooltip["follow_thread"] = None


def get_cursor_area():
    """–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞"""
    try:
        x, y = mouse.Controller().position
        debug_log(f"üñ±Ô∏è –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: ({x}, {y})")

        left = x 
        top = y 
        right = left + AREA_SIZE
        bottom = top + AREA_SIZE

        img = ImageGrab.grab(bbox=(left, top, right, bottom))
        return img, (x, y)

    except Exception as e:
        debug_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None, (0, 0)


def tooltip_worker(root):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç Alt + –º—ã—à—å"""
    global is_alt_pressed, last_item_id

    debug_log("üü¢ Tooltip Analyzer –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ Alt...")

    while True:
        try:
            alt_pressed = keyboard.is_pressed('F')

            if alt_pressed:
                if not is_alt_pressed:
                    is_alt_pressed = True
                    debug_log("‚úÖ Alt –∑–∞–∂–∞—Ç ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑")

                img, pos = get_cursor_area()
                if img is None:
                    time.sleep(OCR_TIMEOUT)
                    continue

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä –¢–û–õ–¨–ö–û –¥–ª—è item_id
                data = parse_trade_data(pytesseract.image_to_string(img, lang='eng', config='--psm 6'))
                item_id = data["item_id"]

                debug_log(f"üîç OCR –Ω–∞—à—ë–ª item_id: {item_id}")

                if item_id and item_id != last_item_id:
                    info = get_item_info(item_id)
                    if info:
                        show_tooltip(info, pos)
                        last_item_id = item_id
                    else:
                        debug_log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞")
                elif not item_id and current_tooltip:
                    hide_tooltip()


            else:
                if is_alt_pressed:
                    is_alt_pressed = False
                    debug_log("üî¥ Alt –æ—Ç–∂–∞—Ç ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                    hide_tooltip()
                    last_item_id = None

            time.sleep(OCR_TIMEOUT)

        except Exception as e:
            debug_log(f"üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ tooltip_worker: {e}")
            time.sleep(1)


def start_tooltip_analyzer(root):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    thread = threading.Thread(target=tooltip_worker, args=(root,), daemon=True)
    thread.start()
    debug_log("üöÄ Tooltip Analyzer –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Left Alt + –Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç.")