# utils/screenshot.py
from mss import mss
import cv2
import numpy as np
from pynput import mouse
import os
from datetime import datetime
from config import resource_path
from utils.logger import debug_log

# –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞
AREA_SIZE = 400

# –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
DEBUG_DIR = "debug_screenshots"


def enhance_for_ocr(img, attempt=1):
    """
    –£–ª—É—á—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏.
    :param img: BGR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    :param attempt: –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (1, 2, 3) ‚Äî —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    :return: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ BGR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    if attempt == 1:
        # –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        gray = clahe.apply(gray)
        _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    elif attempt == 2:
        # –°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –±–æ–ª—å—à–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        gray = cv2.GaussianBlur(gray, (1, 1), 1.0)
        gray = cv2.addWeighted(gray, 1.5, gray, -0.5, 0)
        _, binary = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY)

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ
    binary = cv2.resize(binary, (0, 0), fx=2, fy=2, interpolation=cv2.INTER_CUBIC)

    # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è
    kernel = np.ones((1, 1), np.uint8)
    binary = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)

    return cv2.cvtColor(binary, cv2.COLOR_GRAY2BGR)


def take_screenshot(save_debug=False):
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞, —É–ª—É—á—à–∞–µ—Ç –µ–≥–æ –¥–ª—è OCR.
    :param save_debug: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :return: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (BGR), –ø—Ä–∏–≥–æ–¥–Ω–æ–µ –¥–ª—è OCR
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    mouse_controller = mouse.Controller()
    x, y = mouse_controller.position

    # –ì—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏
    monitor = {
        "left": x ,
        "top": y - 40,
        "width": AREA_SIZE,
        "height": AREA_SIZE
    }

    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    with mss() as sct:
        sct_img = sct.grab(monitor)
        img = np.array(sct_img)  # BGRA
        img_bgr = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

        # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR
        img_enhanced = enhance_for_ocr(img_bgr)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É debug, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if save_debug:
            os.makedirs(DEBUG_DIR, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            original_path = os.path.join(DEBUG_DIR, f"screenshot_{timestamp}_original.png")
            enhanced_path = os.path.join(DEBUG_DIR, f"screenshot_{timestamp}_enhanced.png")

            cv2.imwrite(original_path, img_bgr)
            cv2.imwrite(enhanced_path, img_enhanced)
            debug_log(f"üì∏ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n  {original_path}\n  {enhanced_path}")

        return img_enhanced