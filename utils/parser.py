# utils/parser.py
from utils.sound import play_error_sound

def parse_trade_data(text):
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    data = {
        "item_id": None,
        "item_name": "",
        "unit_price": 0,
        "quantity": 0,
        "total_price": 0,
        "outlet_type": None,        # 0 = –ü—Ä–æ–¥–∞–∂–∞, 1 = –ü–æ–∫—É–ø–∫–∞
        "seller_name": ""           # –ò–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "Buy Items ..." –∏–ª–∏ "Items to Sell ..."
    }

    try:
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å —Ç–∏–ø–æ–º –ª–∞–≤–∫–∏
        for line in lines:
            line_lower = line.lower()

            # –°–ª—É—á–∞–π: "Buy Items <–∏–º—è>"
            if "buy items" in line_lower and not data["outlet_type"]:
                parts = line.split(" ", 2)  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                if len(parts) > 2:
                    data["seller_name"] = parts[2].strip()
                elif len(parts) == 2:
                    data["seller_name"] = parts[1].strip()
                data["outlet_type"] = 0  # –ü–æ–∫—É–ø–∫–∞
                break

            # –°–ª—É—á–∞–π: "Items to Sell <–∏–º—è>"
            elif "items to sell" in line_lower and not data["outlet_type"]:
                parts = line.split(" ", 3)  # "Items to Sell Saxarock"
                if len(parts) > 3:
                    data["seller_name"] = parts[3].strip()
                elif len(parts) == 3:
                    data["seller_name"] = parts[2].strip()
                data["outlet_type"] = 1  # –ü—Ä–æ–¥–∞–∂–∞
                break

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ª–∞–≤–∫–∏
        if data["outlet_type"] is None:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ª–∞–≤–∫–∏ (Buy Items / Items to Sell)")
            data["outlet_type"] = 0  # –î–µ—Ñ–æ–ª—Ç: –ø—Ä–æ–¥–∞–∂–∞
            data["seller_name"] = "Unknown"

        # –ü–∞—Ä—Å–∏–º Unit Price
        unit_price_idx = None
        for i, line in enumerate(lines):
            if "unit price" in line.lower():
                unit_price_idx = i
                break

        if unit_price_idx is not None:
            raw_unit_price = lines[unit_price_idx].split(":")[1].strip()
            clean_unit_price = ''.join(filter(str.isdigit, raw_unit_price.split()[0]))
            if clean_unit_price:
                data["unit_price"] = float(clean_unit_price)

        # –ü–∞—Ä—Å–∏–º Quantity
        quantity_idx = None
        for i, line in enumerate(lines):
            if "quantity" in line.lower():
                quantity_idx = i
                break

        if quantity_idx is not None:
            raw_quantity = lines[quantity_idx].split(":")[1].strip()
            clean_quantity = ''.join(filter(str.isdigit, raw_quantity.split()[0]))
            if clean_quantity:
                data["quantity"] = int(clean_quantity)

        # –ü–∞—Ä—Å–∏–º Item ID
        for line in lines:
            if "id" in line.lower() and ":" in line:
                parts = line.split(":", 1)
                if len(parts) > 1:
                    raw_id = parts[1].strip()
                    clean_id = ''.join(filter(str.isdigit, raw_id))
                    if clean_id:
                        data["item_id"] = int(clean_id)
                        break

        # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—â–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –¥–ª–∏–Ω–æ–π 3‚Äì5 —Ü–∏—Ñ—Ä
        if not data["item_id"]:
            for line in lines:
                potential_id = ''.join(filter(str.isdigit, line))
                if potential_id.isdigit() and 3 <= len(potential_id) <= 5:
                    data["item_id"] = int(potential_id)
                    break

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        data["total_price"] = data["unit_price"] * data["quantity"]

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"üîç –ù–∞–π–¥–µ–Ω item_id: {data['item_id']}")
        print(f"üìù –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞: {data['item_name']}")
        print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {data['unit_price']}")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}")
        print(f"üßÆ –û–±—â–∞—è —Å—É–º–º–∞: {data['total_price']}")
        print(f"üõí –¢–∏–ø –ª–∞–≤–∫–∏: {'–ü–æ–∫—É–ø–∫–∞' if data['outlet_type'] == 1 else '–ü—Ä–æ–¥–∞–∂–∞'}")
        print(f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {data['seller_name']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        play_error_sound()

    return data