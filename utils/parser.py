# utils/parser.py
from utils.sound import play_error_sound
import re

def parse_trade_data(text):
    lines = [line.strip() for line in text.splitlines() if line.strip()]
    data = {
        "item_id": None,
        "item_name": "",
        "unit_price": 0,
        "quantity": 0,
        "total_price": 0,
        "outlet_type": None,
        "seller_name": ""
    }

    try:
        # –ü–æ–∏—Å–∫ —Ç–∏–ø–∞ –ª–∞–≤–∫–∏
        for line in lines:
            line_lower = line.lower()

            if "buy items" in line_lower and data["outlet_type"] is None:
                parts = line.split(" ", 2)
                data["seller_name"] = parts[2].strip() if len(parts) > 2 else parts[1].strip()
                data["outlet_type"] = 0  # –ü–æ–∫—É–ø–∫–∞
                break

            elif "items to sell" in line_lower and data["outlet_type"] is None:
                parts = line.split(" ", 3)
                data["seller_name"] = parts[3].strip() if len(parts) > 3 else parts[2].strip()
                data["outlet_type"] = 1  # –ü—Ä–æ–¥–∞–∂–∞
                break

        if data["outlet_type"] is None:
            data["outlet_type"] = 0
            data["seller_name"] = "Unknown"

        # Unit Price
        for line in lines:
            if "unit price" in line.lower():
                raw = line.split(":", 1)[1].strip()
                digits = ''.join(filter(str.isdigit, raw.split()[0]))
                if digits:
                    data["unit_price"] = float(digits)
                break

        # Quantity
        for line in lines:
            if "quantity" in line.lower():
                raw = line.split(":", 1)[1].strip()
                digits = ''.join(filter(str.isdigit, raw.split()[0]))
                if digits:
                    data["quantity"] = int(digits)
                break

        # üîç –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—â–µ–º ID –¢–û–õ–¨–ö–û –≤ —Å—Ç—Ä–æ–∫–∞—Ö —Å "ID"
        id_pattern = r'(?i)\b(?:id|item\s*id)[\s:]+([0-9,.\s]+)'
        for line in lines:
            match = re.search(id_pattern, line)
            if match:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
                id_text = match.group(1)
                clean_id = ''.join(filter(str.isdigit, id_text))
                if clean_id.isdigit() and len(clean_id) >= 3:
                    data["item_id"] = int(clean_id)
                    break  # –ù–∞—à–ª–∏ ID ‚Äî –≤—ã—Ö–æ–¥–∏–º

        # üîÅ –†–µ–∑–µ—Ä–≤: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ "ID", –∏—â–µ–º –ª—é–±–æ–µ 3‚Äì5-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
        if not data["item_id"]:
            for line in lines:
                potential = ''.join(filter(str.isdigit, line))
                if potential.isdigit() and 3 <= len(potential) <= 5:
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                    if int(potential) > 100:  # –ù–µ 01, 02, 99
                        data["item_id"] = int(potential)
                        break

        data["total_price"] = data["unit_price"] * data["quantity"]

        print(f"üîç –ù–∞–π–¥–µ–Ω item_id: {data['item_id']}")
        print(f"üìù –ò–º—è –ø—Ä–µ–¥–º–µ—Ç–∞: {data['item_name']}")
        print(f"üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {data['unit_price']}")
        print(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}")
        print(f"üßÆ –û–±—â–∞—è —Å—É–º–º–∞: {data['total_price']}")
        print(f"üõí –¢–∏–ø –ª–∞–≤–∫–∏: {'–ü–æ–∫—É–ø–∫–∞' if data['outlet_type'] == 0 else '–ü—Ä–æ–¥–∞–∂–∞'}")
        print(f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {data['seller_name']}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    return data