# gui/trade_gui.py

import tkinter as tk
from tkinter import ttk, messagebox, StringVar, Frame, Label, Entry, Button, Canvas, Scrollbar, Toplevel
from PIL import Image, ImageTk
import io
import winsound
from database.db import connect_db
from io import BytesIO
from utils.sound import play_error_sound, play_success_sound




previous_choice = [0, 0]  # [—Ç–∏–ø –ª–∞–≤–∫–∏ (0 –ø–æ–∫—É–ø–∫–∞ /1 –ø—Ä–æ–¥–∞–∂–∞), –∏–Ω–¥–µ–∫—Å –≥–æ—Ä–æ–¥–∞]


class TradeLoggerGUI:
    def __init__(self, root):
        self.root = root
        global previous_choice

    def show_confirmation_dialog(self, data):
        print("DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

        dialog = tk.Toplevel(self.root)
        dialog.overrideredirect(True)
        dialog.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        dialog.geometry("500x650+100+50")
        dialog.configure(bg="#2a2a2a")
        dialog.attributes("-topmost", True)
        dialog.grab_set()
        dialog.focus_force()
        dialog.update()

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
        header_frame = tk.Frame(dialog, bg="#1e1e1e", height=40)
        header_frame.pack(fill="x", padx=10, pady=(5, 10))
        header_frame.pack_propagate(False)
        tk.Label(
            header_frame,
            text="üîç –ù–∞–π–¥–µ–Ω–∞ –ª–∞–≤–∫–∞",
            font=("Segoe UI", 12, "bold"),
            bg="#1e1e1e",
            fg="#ffffff"
        ).pack(pady=8)

        # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å ---
        info_frame = tk.Frame(dialog, bg="#2a2a2a", relief="flat", bd=0)
        info_frame.pack(fill="x", padx=20, pady=5)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ë–î
        try:
            conn = connect_db()
            cur = conn.cursor()
            cur.execute("SELECT item_name FROM items WHERE item_id = %s", (data["item_id"],))
            result = cur.fetchone()
            conn.close()
            item_name_db = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            is_known = bool(result)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∏–∑ –ë–î: {e}")
            item_name_db = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            is_known = False

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = (
            f"  ID: {data['item_id']}\n"
            f"  –ü—Ä–µ–¥–º–µ—Ç: {item_name_db}\n"
            f"  –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {data['unit_price']:,} Adena\n"
            f"  –ö–æ–ª-–≤–æ: {data['quantity']}\n"
            f"  –°—É–º–º–∞: {data['total_price']:,} Adena"
        )

        tk.Label(
            info_frame,
            text=info_text,
            justify="left",
            font=("Consolas", 10),
            bg="#2a2a2a",
            fg="#e0e0e0",
            anchor="w",
            padx=10,
            pady=10
        ).pack(fill="x")

        ttk.Separator(dialog, orient='horizontal').pack(fill='x', padx=20, pady=10)

        # --- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º ---
        analytics_frame = tk.Frame(dialog, bg="#2a2a2a")
        analytics_frame.pack(fill="x", padx=20, pady=5)

        tk.Label(
            analytics_frame,
            text="üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –†–´–ù–ö–û–ú",
            font=("Segoe UI", 10, "bold"),
            bg="#2a2a2a",
            fg="#00BFFF"
        ).pack(anchor="w", pady=(0, 10))

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        try:
            conn = connect_db()
            cur = conn.cursor()

            outlet_type = data.get("outlet_type")  # 0 = –ü—Ä–æ–¥–∞–∂–∞, 1 = –ü–æ–∫—É–ø–∫–∞

            if outlet_type == 0:  # –ü—Ä–æ–¥–∞–∂–∞ ‚Üí —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏
                cur.execute("""
                    SELECT 
                        AVG(unit_price)::float AS avg_price,
                        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY unit_price) AS median_price
                    FROM trade_logs 
                    WHERE item_id = %s AND outlet_type = 0 AND date_timestamp >= NOW() - INTERVAL '7 days'
                """, (data["item_id"],))
            else:  # –ü–æ–∫—É–ø–∫–∞ ‚Üí —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏
                cur.execute("""
                    SELECT 
                        AVG(unit_price)::float AS avg_price,
                        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY unit_price) AS median_price
                    FROM trade_logs 
                    WHERE item_id = %s AND outlet_type = 1 AND date_timestamp >= NOW() - INTERVAL '7 days'
                """, (data["item_id"],))

            row = cur.fetchone()
            conn.close()

            if row and row[0] is not None:
                avg_price = float(row[0])
                median_price = float(row[1])
                current_price = float(data["unit_price"])

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å
                if outlet_type == 0:  # –ü—Ä–æ–¥–∞–∂–∞: —á–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ
                    if current_price >= avg_price * 1.1:
                        flag = "üü¢"
                        verdict = "–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞! –õ—É—á—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ"
                        color = "#4CAF50"
                    elif current_price <= avg_price * 0.9:
                        flag = "üî¥"
                        verdict = "–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞. –ú–æ–≥—É—Ç –Ω–µ –∫—É–ø–∏—Ç—å"
                        color = "#F44336"
                    else:
                        flag = "üü°"
                        verdict = "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞. –ù–æ—Ä–º–∞–ª—å–Ω–æ"
                        color = "#FF9800"
                else:  # –ü–æ–∫—É–ø–∫–∞: —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ
                    if current_price <= avg_price * 0.9:
                        flag = "üü¢"
                        verdict = "–ù–∏–∑–∫–∞—è —Ü–µ–Ω–∞! –í—ã–≥–æ–¥–Ω–æ –∫—É–ø–∏—Ç—å"
                        color = "#4CAF50"
                    elif current_price >= avg_price * 1.1:
                        flag = "üî¥"
                        verdict = "–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞. –ü–µ—Ä–µ–ø–ª–∞—Ç–∞"
                        color = "#F44336"
                    else:
                        flag = "üü°"
                        verdict = "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å"
                        color = "#FF9800"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                analysis_text = (
                    f"{flag} {verdict}\n\n"
                    f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} Adena\n"
                    f"–ú–µ–¥–∏–∞–Ω–∞: {median_price:,.0f} Adena\n"
                    f"–í–∞—à–∞ —Ü–µ–Ω–∞: {current_price:,.0f} Adena\n"
                    f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {((current_price - avg_price) / avg_price * 100):+.1f}%"
                )

            else:
                analysis_text = "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É."
                color = "#bbbbbb"

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            analysis_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É.\n–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            color = "#d32f2f"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑
        tk.Label(
            analytics_frame,
            text=analysis_text,
            justify="left",
            font=("Consolas", 10),
            bg="#2a2a2a",
            fg=color,
            anchor="w",
            padx=10,
            pady=10
        ).pack(fill="x")

        ttk.Separator(dialog, orient='horizontal').pack(fill='x', padx=20, pady=10)

        # --- –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ ---
        form_frame = tk.Frame(dialog, bg="#2a2a2a", bd=3)
        form_frame.pack(fill="x", padx=20)

        # –¢–∏–ø –ª–∞–≤–∫–∏
        tk.Label(form_frame, text="–¢–∏–ø –ª–∞–≤–∫–∏:", font=("Segoe UI", 9), bg="#2a2a2a", fg="#bbbbbb").pack()
        outlet_var = tk.StringVar()
        outlet_combo = ttk.Combobox(form_frame, textvariable=outlet_var, state="readonly", width=15, font=("Segoe UI", 9))
        outlet_combo['values'] = ("–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞")
        if "outlet_type" in data:
            outlet_combo.current(data["outlet_type"])
        else:
            outlet_combo.current(0)
        outlet_combo.pack(pady=(0, 10))

        # –ì–æ—Ä–æ–¥
        tk.Label(form_frame, text="–ì–æ—Ä–æ–¥:", font=("Segoe UI", 9), bg="#2a2a2a", fg="#bbbbbb").pack()
        city_var = tk.StringVar()
        city_combo = ttk.Combobox(form_frame, textvariable=city_var, state="readonly", width=25, font=("Segoe UI", 9))
        city_combo['values'] = (
            "Talking Island Village", "Elven Village", "The Dark Elf Village", "Orc Village", "Dwarven Village",
            "The Village of Gludin", "The Town of Gludio", "The Town of Dion", "Giran Castle Town",
            "Town of Oren", "Heine", "Town of Aden", "Floran Village", "Hunters Village",
            "Ivory Tower", "Gludin Arena", "Giran Arena", "Coliseum"
        )
        city_combo.current(previous_choice[1] if previous_choice else 0)
        city_combo.pack(pady=(0, 10))

        # –ù–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞
        seller_name = data.get("seller_name", "").strip()
        if not seller_name or seller_name == "Unknown":
            seller_name = "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

        tk.Label(
            form_frame,
            text="–ù–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞: ",
            font=("Segoe UI", 9),
            bg="#2a2a2a",
            fg="#bbbbbb"
        ).pack()

        tk.Label(
            form_frame,
            text=seller_name,
            font=("Segoe UI", 9, "bold"),
            bg="#2a2a2a",
            fg="#ffffff"
        ).pack()

        nick_name = tk.StringVar(value=seller_name)
        nickname_entry = tk.Entry(
            form_frame,
            textvariable=nick_name,
            width=25,
            font=("Segoe UI", 10),
            bg="#3a3a3a",
            fg="#ffffff",
            insertbackground="white",
            relief="flat",
            highlightthickness=1,
            highlightbackground="#555"
        )
        nickname_entry.pack()
        nickname_entry.focus_set()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
        item_name_var = None
        item_name_entry = None
        if not is_known:
            tk.Label(form_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", font=("Segoe UI", 9), bg="#2a2a2a", fg="#bbbbbb").pack()
            item_name_var = tk.StringVar()
            item_name_entry = tk.Entry(
                form_frame, textvariable=item_name_var, width=25,
                font=("Segoe UI", 10),
                bg="#3a3a3a", fg="#ffffff", insertbackground="white",
                relief="flat", highlightthickness=1, highlightbackground="#555"
            )
            item_name_entry.pack(pady=(0, 10))
            item_name_entry.insert(0, data.get("item_name", "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"))

        # --- –ü–æ–¥—Å–∫–∞–∑–∫–∏ ---
        tips_frame = tk.Frame(dialog, bg="#252525", relief="flat", bd=1)
        tips_frame.pack(fill="x", padx=20, pady=(10, 5), ipady=5)
        tk.Label(
            tips_frame,
            text="‚ÑπÔ∏è Enter ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å  |  Esc ‚Äî –û—Ç–º–µ–Ω–∞",
            font=("Segoe UI", 8),
            bg="#252525",
            fg="#aaaaaa"
        ).pack()

        # --- –ö–Ω–æ–ø–∫–∏ ---
        button_frame = tk.Frame(dialog, bg="#2a2a2a")
        button_frame.pack(pady=15)

        def confirm():
            selected_outlet = outlet_combo.get()
            selected_city_index = city_combo.current()
            entered_nickname = nickname_entry.get().strip()

            if not selected_outlet or not entered_nickname:
                entered_nickname = seller_name

            data["outlet_type"] = 0 if selected_outlet == "–ü–æ–∫—É–ø–∫–∞" else 1
            data["outlet_city"] = selected_city_index
            data["nickname"] = entered_nickname

            if item_name_entry is not None:
                entered_item_name = item_name_entry.get().strip()
                if not entered_item_name or entered_item_name == "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ":
                    play_error_sound()
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞!")
                    return
                data["item_name"] = entered_item_name
                from database.db import ensure_item_exists
                ensure_item_exists(data["item_id"], entered_item_name)

            from database.db import save_to_db
            save_to_db(
                item_id=data["item_id"],
                unit_price=data["unit_price"],
                quantity=data["quantity"],
                total_price=data["total_price"],
                outlet_type=data["outlet_type"],
                outlet_city=data["outlet_city"],
                nickname=data["nickname"]
            )

            global previous_choice
            previous_choice = [data["outlet_type"], selected_city_index]

            dialog.destroy()
            play_success_sound()

        def cancel():
            dialog.destroy()
            play_error_sound()

        tk.Button(
            button_frame, text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=confirm,
            bg="#007acc", fg="white", font=("Segoe UI", 10), relief="flat", padx=20, pady=6,
            activebackground="#005a9e", cursor="hand2"
        ).pack(side="left", padx=10)

        tk.Button(
            button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=cancel,
            bg="#d32f2f", fg="white", font=("Segoe UI", 10), relief="flat", padx=20, pady=6,
            activebackground="#b71c1c", cursor="hand2"
        ).pack(side="left", padx=10)

        # --- –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ---
        dialog.bind('<Return>', lambda e: confirm())
        dialog.bind('<Escape>', lambda e: cancel())

        self.root.wait_window(dialog)


    def show_deal_info(self, data):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –ø–æ item_id.
        –ù–æ–≤—ã–π –º–∞–∫–µ—Ç: –ª–µ–≤–æ-–ø—Ä–∞–≤–æ, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∏–∂–Ω–∏–π –±–ª–æ–∫ —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º.
        """
        item_id = data.get("item_id")
        if not item_id:
            play_error_sound()
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–∫–∞–∑–∞–Ω item_id")
            return

        dialog = tk.Toplevel(self.root)
        dialog.title(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ item_id {item_id}")
        dialog.geometry("460x460+100+100")
        dialog.configure(bg="#2a2a2a")
        dialog.attributes("-topmost", True)
        dialog.grab_set()
        dialog.focus_force()
        dialog.update()

        # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
        try:
            conn = connect_db()
            cur = conn.cursor()
            cur.execute("SELECT item_name FROM items WHERE item_id = %s", (item_id,))
            result = cur.fetchone()
            conn.close()
            item_name = result[0] if result else f"–ü—Ä–µ–¥–º–µ—Ç {item_id}"
        except:
            item_name = f"–ü—Ä–µ–¥–º–µ—Ç {item_id}"

        header_frame = tk.Frame(dialog, bg="#1e1e1e", height=60)
        header_frame.pack(fill="x", padx=20, pady=(10, 15))
        header_frame.pack_propagate(False)
        tk.Label(
            header_frame,
            text=item_name.upper(),
            font=("Segoe UI", 14, "bold"),
            bg="#1e1e1e",
            fg="#ffffff"
        ).pack(expand=True)

        # --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ª–µ–≤–æ-–ø—Ä–∞–≤–æ-—Ü–µ–Ω—Ç—Ä ---
        main_frame = tk.Frame(dialog, bg="#2a2a2a")
        main_frame.pack(fill="both", expand=True, padx=20, pady=10)

        # –õ–µ–≤—ã–π –±–ª–æ–∫: –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞
        left_frame = tk.Frame(main_frame, bg="#2e2e2e", relief="groove", bd=1, padx=15, pady=15)
        left_frame.pack(side="left", fill="both")

        tk.Label(
            left_frame,
            text="üü¢ –õ–£–ß–®–ê–Ø –ü–û–ö–£–ü–ö–ê",
            font=("Segoe UI", 9, "bold"),
            bg="#2e2e2e",
            fg="#4CAF50"
        ).pack(anchor="w", pady=(0, 10))

        # –î–∞–Ω–Ω—ã–µ
        try:
            conn = connect_db()
            cur = conn.cursor()
            cur.execute("""
                SELECT best_buy_price::float, best_buy_nickname, best_buy_city_name, buy_hours_ago
                FROM vw_trade_deals WHERE item_id = %s
            """, (item_id,))
            row = cur.fetchone()
            conn.close()

            if row:
                price, nickname, city, hours_ago = row
                price_text = f"{int(price):,}" if price else "‚Äî"
                nickname_text = nickname or "‚Äî"
                city_text = city or "‚Äî"
                age_text = f"{hours_ago:.1f} —á" if hours_ago else "‚Äî"
            else:
                price_text = nickname_text = city_text = age_text = "‚Äî"
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î: {e}")
            price_text = nickname_text = city_text = age_text = "‚Äî"

        buy_info = f"–¶–µ–Ω–∞: {price_text} Adena\n–ö—Ç–æ: {nickname_text}\n–ì–æ—Ä–æ–¥: {city_text}\n–í–æ–∑—Ä–∞—Å—Ç: {age_text}"
        tk.Label(
            left_frame,
            text=buy_info,
            justify="left",
            font=("Consolas", 8),
            bg="#2e2e2e",
            fg="#e0e0e0",
            anchor="w"
        ).pack(anchor="w", pady=5)

        # –ü—Ä–∞–≤—ã–π –±–ª–æ–∫: –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞
        right_frame = tk.Frame(main_frame, bg="#2e2e2e", relief="groove", bd=1, padx=15, pady=15)
        right_frame.pack(side="right", fill="both")

        tk.Label(
            right_frame,
            text="üî¥ –õ–£–ß–®–ê–Ø –ü–†–û–î–ê–ñ–ê",
            font=("Segoe UI", 9, "bold"),
            bg="#2e2e2e",
            fg="#F44336"
        ).pack(anchor="w", pady=(0, 10))

        try:
            conn = connect_db()
            cur = conn.cursor()
            cur.execute("""
                SELECT best_sell_price::float, best_sell_nickname, best_sell_city_name, sell_hours_ago
                FROM vw_trade_deals WHERE item_id = %s
            """, (item_id,))
            row = cur.fetchone()
            conn.close()

            if row:
                price, nickname, city, hours_ago = row
                price_text = f"{int(price):,}" if price else "‚Äî"
                nickname_text = nickname or "‚Äî"
                city_text = city or "‚Äî"
                age_text = f"{hours_ago:.1f} —á" if hours_ago else "‚Äî"
            else:
                price_text = nickname_text = city_text = age_text = "‚Äî"
        except:
            price_text = nickname_text = city_text = age_text = "‚Äî"

        sell_info = f"–¶–µ–Ω–∞: {price_text} Adena\n–ö—Ç–æ: {nickname_text}\n–ì–æ—Ä–æ–¥: {city_text}\n–í–æ–∑—Ä–∞—Å—Ç: {age_text}"
        tk.Label(
            right_frame,
            text=sell_info,
            justify="left",
            font=("Consolas", 8),
            bg="#2e2e2e",
            fg="#e0e0e0",
            anchor="w"
        ).pack(anchor="w", pady=5)

        # --- –ù–∏–∂–Ω–∏–π –±–ª–æ–∫: –ü—Ä–æ—Ñ–∏—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
        bottom_frame = tk.Frame(dialog, bg="#252525", relief="flat", bd=1, padx=15, pady=15)
        bottom_frame.pack(fill="x", padx=20, pady=(0, 20))

        try:
            conn = connect_db()
            cur = conn.cursor()
            cur.execute("""
                SELECT profit_abs, profit_percent, avg_buy_price, avg_sell_price
                FROM vw_trade_deals WHERE item_id = %s
            """, (item_id,))
            row = cur.fetchone()
            conn.close()

            if row:
                profit_abs, profit_percent, avg_buy, avg_sell = row
                profit_abs = float(profit_abs) if profit_abs else 0
                profit_percent = float(profit_percent) if profit_percent else 0
            else:
                profit_abs = profit_percent = 0
        except:
            profit_abs = profit_percent = 0

        # –ò–∫–æ–Ω–∫–∞ –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–∏—Ç–∞
        if profit_percent >= 20:
            icon = "üöÄ"
            color = "#4CAF50"
            tip = "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç! –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏."
        elif profit_percent >= 5:
            icon = "üí∞"
            color = "#FF9800"
            tip = "–£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç. –ú–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å."
        else:
            icon = "üìâ"
            color = "#F44336"
            tip = "–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ñ–∏—Ç. –í—Ä—è–¥ –ª–∏ –≤—ã–≥–æ–¥–Ω–æ."

        bottom_text = f"{icon} –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {profit_abs:,.0f} Adena ({profit_percent:.1f}%)\n\n"
        bottom_text += f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {tip}"

        tk.Label(
            bottom_frame,
            text=bottom_text,
            justify="left",
            font=("Segoe UI", 8),
            bg="#252525",
            fg=color
        ).pack(anchor="w")

        # --- –ö–Ω–æ–ø–∫–∞ ---
        btn_frame = tk.Frame(dialog, bg="#2a2a2a")
        btn_frame.pack(pady=5)

        def close():
            dialog.destroy()

        tk.Button(
            btn_frame,
            text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
            command=close,
            bg="#007acc",
            fg="white",
            font=("Segoe UI", 9),
            relief="flat",
            padx=20,
            pady=6,
            activebackground="#005a9e",
            cursor="hand2"
        ).pack()

        # --- –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ ---
        dialog.bind('<Return>', lambda e: close())
        dialog.bind('<Escape>', lambda e: close())

        self.root.wait_window(dialog)